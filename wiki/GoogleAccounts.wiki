#summary How to activate support for Google Accounts.

= Using Google Accounts =

It's possible to use Google Accounts instead of Django's auth mechanism or alternatively use a hybrid system that supports both authentication methods.

== Google Accounts only ==

You just need a few changes in your settings.py:

{{{
# Replace Django's AuthenticationMiddleware with GoogleAuthenticationMiddleware.
MIDDLEWARE_CLASSES = (
    # Note: You don't need the SessionMiddleware for Google Accounts
    ...
    'ragendja.auth.middleware.GoogleAuthenticationMiddleware',
    ...
)

# Change the User model class
AUTH_USER_MODULE = 'ragendja.auth.google_models'
}}}

Note that the default Google `User` model does not have `first_name` and `last_name` properties, but it adds a `user` property of type `db.UserProperty`. Also, the `email` and `username` properties can't be changed or queried with a `filter()` call because they are dynamically retrieved from the `user` property. You can [CustomUserModel define your own] `User` model if you want to change anything.

== Hybrid authentication ==

With hybrid authentication you can use both Google and Django accounts. Just add this to your settings.py:
{{{
# Replace Django's AuthenticationMiddleware with HybridAuthenticationMiddleware.
MIDDLEWARE_CLASSES = (
    ...
    'ragendja.auth.middleware.HybridAuthenticationMiddleware',
    ...
)

# Change the User model class
AUTH_USER_MODULE = 'ragendja.auth.hybrid_models'
}}}

Note that in this case Django's original `login_required` decorator will be used, so you'll have to take care of making both authentication methods visible on your login page. Also, the `User` model has all properties that are defined in Django in addition to a `user` property which can be set to `None`.

= Template tags =

Add the following to your settings.py:
{{{
# Add google_login_url and google_logout_url tags
GLOBALTAGS = (
    'ragendja.templatetags.googletags',
)
}}}

Alternatively, you can add `'ragendja'` to your `INSTALLED_APPS` and `{% load googletags %}` in your template.

This will add two template tags for creating login and logout urls (`google_login_url` and `google_logout_url`). Both tags can take an optional parameter specifying the redirect URL after login/logout:
{{{
<div class="login">
  {% if user.is_authenticated %}
    Welcome, {{ user.email }}
    <a href="{% google_logout_url %}">Logout</a>
  {% else %}
    <a href="{% google_login_url request.get_full_path %}">Login</a>
  {% endif %}
</div>
}}}