#summary Conventions and tools for writing self-contained apps.

Many open-source Django apps come without any templates because there is no standard for template blocks. Also, apps that require JS/CSS don't have any conventions, either. The next problem is that while it's Python convention to be explicit it would be nice to have all app-specific code in a single folder, so your code becomes fully reusable.

With app-engine-patch we would like to change this and make reusing and installing Django apps as simple as adding them to `INSTALLED_APPS`. That's it. For this we added several features.

= Automatic app settings integration =

The sample project is pre-configured to load a settings.py module from each installed app. All variables defined in that module automatically get integrated into the main settings.py module (which means you can override global settings). You can also get access to the variables defined in the main settings in case you need to extend or modify them:

{{{
# myapp/settings.py:

# Import all variables from main settings module
from settings_post import *
# Append a new middleware class
MIDDLEWARE_CLASSES += (
    'myapp.middleware.MyAppMiddleware',
)
}}}

As you can see, this reduces the amount of work users need to do in order to install an app. If, for example, some middleware class needs to *always* be installed you can just add it automatically and take the burden from the user.

= Automatic app urls integration =

The `ragendja.urlsauto` module allows for automatically integrating the installed apps' urls with a default base URL. Simply define an "urlsauto.py" module with an `urlpatterns` variable. It will automatically be appended to the global "urls.py". For example, we've extended the registration app to support this:

{{{
# registration/urlsauto.py:

from django.conf.urls.defaults import *

# Integrate registration app under /account/...
urlpatterns = patterns('',
    (r'^account/', include('registration.urls')),
)
}}}

= Media generator =

See the [MediaGenerator media generator documentation] for more information. If you combine this feature with app settings integration you can automatically add all required media files. For this we provide the utility function `add_app_media` which inserts your media files *before* the media files defined in the global settings:

{{{
# myapp/settings.py:

from settings_post import *
add_app_media(globals(), 'combined-%(LANGUAGE_CODE)s.js',
    'myapp/bla.js',
    'myapp/blub.js',
    # ...
)
add_app_media(globals(), 'combined.css',
    'myapp/style.css',
    # ...
)

MIDDLEWARE_CLASSES += (
    'myapp.middleware.MyAppMiddleware',
)
}}}

As a convention, app-engine-patch expects that you name your main media files "combined.css" and "combined-%(LANGUAGE_CODE)s.js". Use that if you want your app to be reusable.

= Template conventions =

Finally, we need some conventions for our base templates, so apps know what to extend and which blocks to use:

 * always place your app templates directly into the app's "templates" folder (e.g., "myapp/templates/somepage.html")
 * always name the base template "base.html" and extend from that template
 * the page title goes into the "title" block
 * the content goes into the "content" block
 * your css files go into the "css" block
 * your js files go into the "js" block (which always comes after the css block)
 * any extra information that must be in the `<head>` goes into the "extra-head" block
 * breadcrumbs and similar items which are above the real content go into the "content-header" block (if you have one)