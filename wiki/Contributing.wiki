#summary How you can help and how to send patches.
#labels Featured

= Donate =

Please consider [Donate donating] to support the development of app-engine-patch.

= Community building =

Spread the word. Write about app-engine-patch on your blog. Feel free to post a link to your article on our [http://groups.google.com/group/app-engine-patch mailing list].

We could also need an article in the [http://code.google.com/appengine/articles/ App Engine articles section].

Actively participate on our [http://groups.google.com/group/app-engine-patch mailing list]. Answer questions and make suggestions.

Take part in hack-a-thons and tell others about app-engine-patch.

Give presentations at conferences.

Create banners that can be placed on websites that use app-engine-patch.

= Make suggestions =

We want to steadily improve app-engine-patch. Please join our [http://groups.google.com/group/app-engine-patch mailing list] and make suggestions on how to make app-engine-patch easier to use and more powerful.

= Coding =

First please read [GettingTheSource how to get the source].

Subscribe to our [http://groups.google.com/group/app-engine-patch mailing list].

Take a look at the list of [http://code.google.com/p/app-engine-patch/issues/list open issues] or suggest a great new feature yourself! The most useful features would be support for Django's admin interface and the comments app.

== Extending app-engine-patch ==

Basically, app-engine-patch is a collection of monkey-patches and a few extra goodies packaged in ragendja. Normally, we manipulate Django's modules, classes, and functions to be compatible with App Engine in our [http://www.bitbucket.org/wkornewald/django-app-engine/ django-app-engine repository].

A few patches can't be integrated directly into Django and are part of the [https://bitbucket.org/wkornewald/appenginepatch/ app-engine-patch repository]. As a first step to understand the source code you should first take a look at these files (in "common/appenginepatch"):

 * manage.py
 * aecmd.py
 * appenginepatcher/patch.py
 * main.py

== Adding custom patches to your project ==

If you want to add a few custom patches you have to write your own main.py handler. You could copy the original main.py and modify the code, but then you'd have to track changes in app-engine-patch and update your main.py manually. There's an easier alternative. Write your own main.py and import everything from the original main.py:

{{{
from common.appenginepatch.main import *

# Do your own patching here
# ...

if __name__ == '__main__':
    main()
}}}


= Sending patches =

In most cases the [http://www.selenic.com/mercurial/wiki/index.cgi/RebaseProject rebase extension] should be flexible enough to maintain your patches. You can alternatively use the [http://www.selenic.com/mercurial/wiki/index.cgi/MqExtension patch queues extension] and send a normal diff, but that's more complicated and should be used if you need powerful patch management.

Just send the patch to our [http://groups.google.com/group/app-engine-patch mailing list] or create a new [http://code.google.com/p/app-engine-patch/issues/list issue] and attach your patch.