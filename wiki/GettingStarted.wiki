#summary Installing and using appenginepatch

= Installing app-engine-patch & ragendja =

By default, we assume the following project structure:

{{{
project root
  app.yaml
  settings.py
  <project-specific code>
  common
    .google_appengine  (only if you use Linux)
    appenginepatch     (copy the whole main folder)
    django             (your custom Django checkout)
    <reusable code>
}}}

If you're on Linux you can put the App Engine SDK into a folder
".google_appengine" under "common". Windows and Max OS should work out of the
box as long as you used the standard installation paths.

If you don't like the project structure you can use your own, but still put
appenginepatch into a subfolder.

= Using appenginepatch =

Your app.yaml could look like this:

{{{
application: mycoolapp
version: 1
runtime: python
api_version: 1

handlers:
- url: /media
  static_dir: media

- url: /.*
  script: common/appenginepatch/main.py
}}}

This will use the default main.py handler which should work for most projects.


= IMPORTANT: Paths =

The default project handler adds "appenginepatch" and "common" to sys.path.
This means that you don't have to specify "common.xxx" in your imports.
For example, you can import something from ragendja directly with:
`from ragendja.testutils import ModelTestCase`

= Porting existing Django applications =

If you've followed the instructions above most of your Django code should just work. Still, you should know about the following details.

== Authentication and the User model ==

This area has the most significant changes. You can continue to import Django's User model, but the fields have slightly changed. We've removed the username field because many websites only need an email address to identify a user. From the user's point of view this also has the advantage that you don't need to invent a username when registering an account and you also can't forget your username. If you seriously need usernames then you can add such a field to your own profile.

The `get_profile()` function isn't supported, anymore. Instead, you should derive your profile from one of the user classes in `ragendja.auth.models`. `UserTraits` provides all fields except for an email address while User adds an email address and the `email_user()` function known from Django. In other words, apart from the username it's the same as Django's `User` class. Then, you should specify your profile via `AUTH_PROFILE_MODULE` in `settings.py`. This has the effect that whenever you import User from `django.contrib.auth.models` you automatically get your profile class. Note that you can't import `django.contrib.auth` from the module that defines your user profile. If you don't specify a profile class then ragendja's `User` is used by default. Note, it's best practice to call your profile class "User" because then you can guarantee that the entity name in the datastore is the same in all projects (that's especially useful if you use `Key.from_path()`).

We've also added a new `is_banned` boolean field, so you can distinguish between users that were banned and users who are not active because they haven't completed the registration process.

Apart from that, you can continue to use the functions in `django.contrib.auth` and custom authentication backends are supported, too.

== settings.py ==

All you need to do is set `DATABASE_ENGINE = ''` and remove all other database settings (host, username, password, etc.).

If you have a custom user profile you can set `AUTH_PROFILE_MODULE` as described above.

The cache backend configuration is ignored and always set to Google's memcache API.

The default (database) auth and session backends automatically get replaced with versions that use the App Engine datastore, so you don't need to change any of your settings. Alternatively, you can specify your own backends as long as they don't depend on unsupported APIs (unsupported: Django models, SQL, sockets).

== Models ==

We only support [http://code.google.com/appengine/docs/datastore/ App Engine models] (`google.appengine.ext.db.Model`). You have to port all Django Model-based code. There are quite a few conceptual differences, especially with transactions and queries. Model definitions look similar, though. Read the [http://code.google.com/appengine/docs/datastore/ datastore documentation] for more information.

== Sending emails ==

Read the [http://code.google.com/appengine/docs/thedevwebserver.html dev_appserver documentation] to find out how to configure email support in the development environment. On the production server no extra configuration is necessary. Note that Django's email server settings (host, username, password, and port) are ignored. You still have to specify a sender address in the settings (`DEFAULT_FROM_EMAIL` and `SERVER_EMAIL`), though.

== Running the development webserver ==

Currently, we don't support manage.py, so the only way to run the development server is by executing the following command in your project's root folder (the one that contains `app.yaml`):

{{{
dev_appserver.py .
}}}

Don't forget the full-stop at the end of the command.