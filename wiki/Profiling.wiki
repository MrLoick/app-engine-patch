#summary How to use the integrated profiler.

= Enabling the profiler =

In your `settings.py` just add the following:

{{{
ENABLE_PROFILER = True
}}}

= Tuning the results =

The profiler is configured via `settings.py`.

You can restrict the profile to certain functions by specifying a regular expression:

{{{
PROFILE_PATTERN = '.*token.*' # matches all function names containing 'token'
}}}

The maximum number of functions can be set with:

{{{
MAX_PROFILE_RESULTS = 160 # default is 80
}}}

You can change the sorting criteria with:

{{{
SORT_PROFILE_RESULTS_BY = 'cumulative' # default is 'time'
}}}

It's possible to additionally get the callers and callees profile:

{{{
EXTRA_PROFILE_OUTPUT = 'callers' # or 'callees' (you can also provide a tuple with multiple values)
}}}

= How to profile datastore calls =

Put this in your settings.py to profile all important datastore calls.

{{{
ENABLE_PROFILER = True
SORT_PROFILE_RESULTS_BY = 'cumulative' # default is 'time'
PROFILE_PATTERN = 'ext.db..+\((?:get|get_by_key_name|fetch|count|put)\)'
}}}

Note that the `db.Model.get()`, `db.Model.get_by_key_name()`, `db.Model.get_by_id()`, and `db.Model.put()` calls translate into `db.get()` and `db.put()`, so for every call of these model functions you'll also get a call of the global db functions.

Please take a look at the `ragendja.dbutils.prefetch_references()` function (see the [Documentation documentation]). It can help optimize your code.