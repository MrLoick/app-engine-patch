#summary Combines and compresses your JS and CSS media files.
#labels OnlyInRepo

*This feature is only available in the repository.*

*Requirements:* You must have Java installed and it must be accessible via PATH.

Note: This feature is pre-configured in the sample project. You can disable it by simply removing "mediautils" from your `INSTALLED_APPS`.

In order to optimize your website you should combine all JS (same goes for CSS) files into a single file and compress it (remove all whitespace and comments), so your users can download all media files in as few requests and as quickly as possible. Depending on the complexity of your site this can provide a huge speed boost on first load.

Luckily, app-engine-patch helps you automate this process. In your settings.py you can specify how media files should be combined. Just put your app-specific media files in a folder called "media" within your app's folder and global media files within a "media" folder in your project root which is faked as the "global" app. The generated media files are stored in the folder "`_generated_media`" which is automatically created in your project root. Anything that is neither a JS nor CSS file (e.g., an image) is directly copied into that folder. Note that the JS translations catalog can be automatically integrated into the generated JS files.

Example settings:

{{{
# Set default language without country code (though, that's supported, too)
LANGUAGE_CODE = 'en'

# Only generate media files for English and German
LOCALE_SITES = (
    'en',
    'de',
)

# Combine media files
COMBINE_MEDIA = {
    # Create a combined JS file which is called "combined-en.js" for English,
    # "combined-de.js" for German, and so on
    'combined-%(LANGUAGE_CODE)s.js': (
        # This adds a settings variable which gives you access to the MEDIA_URL
        '.site_data.js',
        # Integrate bla.js from "myapp/media" folder
        # You don't write "media" because that folder is used automatically
        'myapp/bla.js',
        # Integrate morecode.js from "media" under project root folder
        'global/morecode.js',
    ),
    # Create a combined CSS file which is called "combined-ltr.css" for
    # left-to-right text direction
    'combined-%(LANGUAGE_DIR)s.css': (
        'myapp/style.css',
        # Load layout for the correct text direction
        'global/layout-%(LANGUAGE_DIR)s.css',
    ),
}

# Increase this when you update your media on the production site, so users
# don't have to refresh their cache. By setting this your MEDIA_URL
# automatically becomes /media/MEDIA_VERSION/
MEDIA_VERSION = 1

# Activate media generator
INSTALLED_APPS = (
   # ...
   'mediautils',
   # ...
)
}}}

The generated media files are only compressed when you run "manage.py update". While developing on your local computer you probably don't want to use compressed media files. If manage.py detects that one of your media files has changed it automatically updates the "`_generated_media`" folder. You can also manually regenerate that folder by running "manage.py generatemedia" (there's also a "--compressed" flag which enforces compression). You probably won't need that command, though.

= Integrating the media files =

Since the generated media files are language-specific you have to integrate them with this method:

{{{
<link rel="stylesheet" type="text/css" href="{{ MEDIA_URL }}combined-{% if LANGUAGE_BIDI %}rtl{% else %}ltr{% endif %}.css" />
<script type="text/javascript" src="{{ MEDIA_URL }}combined-{{ LANGUAGE_CODE }}.js"></script>
}}}

= i18n =

You might know about Django's [http://docs.djangoproject.com/en/dev/topics/i18n/#translations-and-javascript JavaScript translation support] which works with AJAX. Since the primary goal of the media generator is to reduce the number of HTTP requests it gets rid of those AJAX requests. Instead, the generated media files automatically contain all JS translations of all installed apps, so you don't need to extend your urls.py and you also don't need to add a new `<script>` tag to load the catalog. Instead, you can directly use `gettext()`, `ngettext()`, and `interpolate()`.