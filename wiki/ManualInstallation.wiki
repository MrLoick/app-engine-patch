#summary Doing it the hard way: installing app-engine-patch manually.
#sidebar Documentation

You can of course install app-engine-patch manually, but it's more difficult than starting with the sample project. Even if you want to use the most recent source directly you can just download the sample project and replace the "common/appenginepatch" folder with a clone of the app-engine-patch repository. If you're still not convinced then let's get started:

First, grab our [GettingTheSource source code]. Use the following project structure:

{{{
project root
  __init__.py
  app.yaml
  settings.py
  manage.py    (copy from "appenginepatch")
  common
    __init__.py
    appenginepatch     (copy the whole main folder)
    django             (our patched Django version)
}}}

Don't forget to copy manage.py from the "appenginepatch" folder into your project root. You can only execute it from your project's root folder.

Your app.yaml could look like this:

{{{
application: sample
version: 1
runtime: python
api_version: 1

default_expiration: '3650d'

handlers:
- url: /media
  static_dir: _generated_media

- url: /.*
  script: common/appenginepatch/main.py
}}}

This will use the default main.py handler which should work for most projects and it'll automatically use the `_generated_media` folder of our [MediaGenerator media generator].

In order to reduce the number of files you can delete the following Django folders:
 * django/bin
 * django/contrib/admin
 * django/contrib/comments
 * django/contrib/databrowse
 * django/contrib/flatpages
 * django/contrib/gis
This should work around GAE's 1000 files limit. Alternatively, you can use a zipped Django package.


= Zipping a Django package =

First, read the [ZipPackages zip packages documentation].

Since you can't load translations from a zip file, so you have to move the contents of "django/conf/locale" to "common/django-locale/locale". This folder automatically gets integrated when using a zipped Django package. Then, at least also remove the "django/contrib/gis" folder because that takes up too much space. Finally, create a "django.zip" file and move it into the "zip-packages" folder.


= settings.py =

All you need to do is add `'appenginepatcher'` to your `INSTALLED_APPS`, set `ROOT_URLCONF = 'urls'`, set `DATABASE_ENGINE = 'appengine'`, and remove all other database settings (host, username, password, etc.).

The cache backend must be enabled with
{{{
CACHE_BACKEND = 'memcached://'
}}}

Unfortunately, this doesn't allow for adding items with infinite timeout. The only way to achieve this is to set a default timeout:
{{{
CACHE_BACKEND = 'memcached://?timeout=0'
}}}